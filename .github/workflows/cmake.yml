name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:

      - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
      
    - uses: actions/checkout@v3
    - name: See Dir
      run: ls ${{github.workspace}}
    - name: Unzip Library opencv
      run: 7z x -y -o${{github.workspace}}/3rdparty/ ${{github.workspace}}/3rdparty/resource/staticlib_opencv.7z  
    - name: Unzip Library onnxruntime
      run:  7z x -y -o${{github.workspace}}/3rdparty/ ${{github.workspace}}/3rdparty/resource/staticlib_onnxruntime.7z 
      
    - name: See Dir opencv
      run: ls ${{github.workspace}}/3rdparty/staticlib/opencv/

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: mkdir build && cd build && cmake ..


      - name: Build
        # Build your program with the given configuration
        run: msbuild ${{github.workspace}}/build/libocr.sln /m /p:Configuration=${{env.BUILD_TYPE}} /p:RuntimeLibrary=MultiThreaded

      - name: Copy Release Lib
        run: copy ${{github.workspace}}\build\Release\libocr.dll ${{github.workspace}}\build\Release\libocr.lib ${{github.workspace}}\build\Release\libocr.pdb -y ${{github.workspace}}\build\libocr\ && copy ${{github.workspace}}\include\libocr.h -y ${{github.workspace}}\build\libocr\Release\

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.1
      with:
        # Artifact name
        name: optional, default is artifact
        # A file, directory or wildcard pattern that describes what to upload
        path:
        # The desired behavior if no files are found using the provided path.
Available Options:
  warn: Output a warning but do not fail the action
  error: Fail the action with an error message
  ignore: Do not output any warnings or errors, the action does not fail

    if-no-files-found: # optional, default is warn
    # Duration after which artifact will expire in days. 0 means using default retention.
  Minimum 1 day. Maximum 90 days unless changed from the repository settings page.

retention-days: # optional