name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: See Dir
      run: ls ${{github.workspace}}
    - name: Unzip Library opencv
      run: tar -czvf ${{github.workspace}}/3rdparty/resource/staticlib_opencv.7z ${{github.workspace}}/3rdparty/staticlib/
    - name: Unzip Library onnxruntime
      run: tar -czvf ${{github.workspace}}/3rdparty/resource/staticlib_onnxruntime.7z ${{github.workspace}}/3rdparty/staticlib/
      
    - name: See Dir opencv
      run: ls ${{github.workspace}}/3rdparty/staticlib/opencv

    - name: See Dir onnxruntime
      run: ls ${{github.workspace}}/3rdparty/staticlib/onnxruntime
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: mkdir build && cd build && cmake ..

    - name: Build
      # Build your program with the given configuration
      run: msbuild libocr.sln /p:Configuration=${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
